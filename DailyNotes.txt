JAVA:
=====
Programming language:
======================
communicate with machines.

machine language.....>>binary language.... 0's & 1's

used to develop softwares/applications.

2types of applications:
==========================
1.Standalone Applications/Desktop applications

eg: antivirus,mediaplayers,calculator,....

2.Distributed Applications/Network applications:

eg: gmail,facebook,whatsapp,,,.....

2types of programming language:

1.POP: Procedure oriented programming

eg: c,b,cobol,......

2.OOP: Object Oriented programming

eg: java,python,.Net,c++,....


oop offers:

1.Performance
2.Security

OOP Paradigm:
==============
1.Inheritance
2.Polymorphism.... performance

3.Encapsulation
4.Abstraction......Security

JAVA:
=====
java is a object oriented programming language, which is used to develop both standalone and distributed applications.


History:
========
developed by sunMicrosystems in 1995.......Oracle corporation.

James Goslings is father of java.

current version :java se 21
standard versions:java se 8,11,17, 21

Long Term support (LTS)

3 Editions of java:
==================
1.Java Standard Edition(JSE)
2.Java Enterprise Edition(JEE)
3.Java Micro/Mobile Edition(JME)

Prerquisites of java Program:
=============================
java...java software...JDK

www.oracle.com...... jdk 8, 11,17

1.download n install java software
2.we need editors: notepad,notepad++,Eclipse,netbeans,intelliJ,,..
3.write java code
4.save .java extension
5.Compile the program
6.Execute the program


structure of java program:
==========================

class <ClassName>
{
public static void main(String args[]){

//logic
}

}

Compilation:
=============
converting high level language into machine level language 

source code-----compiler----byte code
.java                        .class


To compile :
javac Filename.java

To execute:
java ClassName

why java??
===========
1. Platform independence
2. Garbage collection

1. Platform independence:

WORA: Write Once, Run Anywhere

windows..................mac 
.java
.class-------------------.class

2.Garbage Collection:-->>performance

500
2

498.... Garbage Collector...>>collect unwanted memory

Fundamentals of java:
======================

structure of java program:
==========================

class <ClassName>
{
public static void main(String args[]){

//logic
}

}

keywords:
we have 53 keywords in java.

Class: Every java code has to be written inside class.

main(): Entry point of java program.
 
 jvm..Java Virtual Machine

** compilation starts from the first line of code, but execution of java code always from the main().

class: keyword...>>declare 

public:keyword...access modifier...visible to all.

static: keyword...class property

void: keyword...returns nothing

main():name of method

(String args[]): String is predefinrd class,  datatypes

args[]: it is parameter for main method

System.out.println: predefinrd class.object.method


working of java program:
=========================
					compiler				jvm					cpu
java source code...............byte code...........machine code......output


JDK,JRE,JVM:
=============
Java Development Kit--JDK
JAva Runtime Environment---JRE
Java Virtual Machine ----JVM

JDK: developement tools+ [JRE]}
===================================
1.Development tools....develop java code---->>compiler,debugger
2.JRE..... to execute our code

JRE:[JVM]+class libraries
==========================
software package to execute java code.

JRE is superset of JVM

JVM:
====
jvm is responsible for executing the java code.

input for jvm....byte code

*both compiled and intrpretd language.


Language Funadmentals:
=======================
main method()
identifers
keywords
data types
types of variables
command line arguments
arrays

Keywords:
=========
53 keywords.

* all the keywords have to be in lowercase.

Identifiers:
============

A name in java 

classname,variable name,method name,interface name...

rules:
------
a to z
A to Z
0 to 9
$
_ (underscore)


1.no other symbols
2.should not start with digits
3.keywords are not allowed to use as identifiers

Eg:
Welcome

class HelloWorld
{
public static void main(String args[]){

//logic
}
}

eg;
 name1 ..valid
 1name ..inavlid
 
 num$=10; valid
 Num#=20; invalid
 
 public=50; //keyworrds invalid
 
 name$----valid
 _$_$_$ ---valid but take meaningful names
 
 15keys---invalid
 
 
Naming Conventions:
====================
* ClassName always starts with a uppercase letter. eg: Helloworld...HelloWorld
*variable names,method names follow camelCase. eg: nameOfStud,additionOfTwo(),,....
*keywords has to be in lowercase.
* java is case sensitive.


Datatypes:
==========

Representing the type of data we want to store in variables.

2types:

1.Primitive
2.Non Primitive : eg:class,String,arrays,,....

1byte= 8bits

range: -2^n-1 to (2^n-1)-1..... n =no. of bits

	Datatypes		size		range						default values

	byte			1byte		-128 to 127      				0         
	short           2byte		-32768 to 32767					0
	int				4byte       -2147483648 to 2147483647   	0
	long            8byte										0

	float 			4             6 to 7 decimal places     	0.0
	double			8			 upto 15 decimal places         0.0

	char            2bytes         0 to 65535(unicode system)   (space charactter)

	boolean          1bit          na 							false

Variables:
==========

A variable is the name of memory location where our data gets stored.

syn:
      <datatype> <variablename> = data/value;
	  

	eg:int i=10;
             22

		vary+able:value can be chnaged

		declaration: <datatype> <variablename>;
		             int i;
					 
		initialization: <datatype> <variablename> = data/value;	 
					 int i=50;
					 
					 camelCase
					 
					 variables: 2types
						1.global variabls
						2.Local variables
						
					Local: variables defined inside a method

					global: variables which are inside the class, but outside the method.
					
					class Test{
					//global variables
					psvm(){
					//local variables
					}
					}
						
				global : 2types

						1.Static variables
						2.Instance variables
						
			4 properties:

1.syntax: if static keyword, static variable	

				no static keyword, instance variable
						
2.Memory: static:-memory allocated only once at the time of class loading into JVM.	
					
		 instance:-for evry object creation.			
						
						
					object is instance of class.
					
					ClassName objref=new ClassNAme(); //object creation
						Test obj=new Test();
						Test obj2=new Test();
						
3.How to access: static:- accessed by using the classname
				instance: accessed by using the object reference.
				
4.when to use:static:-	common properties	eg:collegename,countryname,....		
				instance:- unique properties	eg:name,contact,...	
						
		
		Typecasting:
		============
		widening
			converting smaller type data into larger types.
			
			byte->short->char->int->long->float->double
			
		narrowing
		
		
		Methods:
		========
		
		Method is a block of code which is defined to perform specific task.
		
		
		**Code Reusability
		
		syn: 
		[access modifier] <return type> <method name>([parameters if any]) //method header
		{
		//logic 
				//method body
		}
		
		eg: public static void main(String[] args)
		{
		
		}
		
		** methods get executed only when called.
		
		additionOfTwo--camelCase
		
		2types:
				1.predefinrd method..... eg:main(),print(),length(),...
				2.userdefined method....static & instance
				
				static method...calling with classname
				instance method...calling with object reference
				
				
		
		packages:     https://docs.oracle.com/javase/8/docs/api/
		==========
		collection of class libraries.
		
		package, import keywords
		
		***java.lang is default package
		
		**object class is the super class of all the java classes.
				--11 methods.
		
		
		import keyword
		import package.*;
		import package.classname;
		
		predefinrd packages
		userdefined packages
		
		package .... domain.company.package
		
		package com.corejava.basics;
		
		to compile: javac -d . filename.java
		
		to execute: java packagename.filename
		
	================================================
	Dynamic i/p from users:
--------------------------------	
	
	run time i/p....by user
	
	 1.Command line arguments
	*2.Scanner Class
	 3.BufferedReader(in files i/o)
	
	1.Command Line Arguments:
	-------------------------
	
	public void display(String name){
	
	sop(name);
	}
	
	obj.display("stella");
	
	public static void main(String[] args){
	
	}
	
	int[] a=1,2,3,4;
	String name="stella";
	
	String names[]={"sandy","stella","125","true","25.22"};
	index
	
	**
	Wrapper classes:
	=================
	
		datatypes			WrapperClasses
		===================================
		byte				Byte		
		short				Short
		int					Integer
		long				Long
		float				Float
		double				Double
		char				Character
		boolean				Boolean
		
		
		parseInt(),parseFloat(),....
		
		
	Scanner class:
	==============
	java.util package
		
		Scanner scan=new Scanner(System.in);
		
		next(),nextInt(),nextFloat();
		
		
		Operators:assignment
		
		javatpoint
		
	Flow controls:
	===============
	
	they describe the order in which te stmts will be executed.
	
	1.Selection stmt/Decision making stmts
	2.Loop stmts/Iterative stmts
	3.Jump stmts/Transfer stmts
	
	1.Decision making stmts:
	=========================
	
	which stmt to execute and when.
	
	
	if stmt
	switch stmt
	
	
	true/false
	
	
	simple if:
	==========
	
	syn:
	
			if(condition){
			
			//staments
			}
	
	whn condition is true.
	
	if else:
	=======
	
	if(condition){
	
	//stmt1;//condition is true
	}
	else{
	stmt2;//condition is false
	}
	
	if else if ladder:
	===============
	if(condition1){
	//stmt1;
	}
	else if(condition2){
	//stmt2;
	}
	else{
	stmt3;
	}
	
	Nested if:
	===========
	if(condition1){
	stmt1;
	if(condition2){
	//stmt2;
	}
	else{
	stmt3;
	}
	}
	
	2.Switch stmt:
	==============
	syn:
	
	switch(expression){
	
	case 1:
        //code

	case 2:
		//code
	
	default:
	
		//code
	}
	
	
	2.Iterative stmt/Loop stmts:
	===============================
	
	evaluating boolean expression.
	
	1.For loop
	2.While loop
	3.Do-while loop
	
	1.For loop:
	===========
	if no of iteraions are known, we choose for loop.
	
	for(initialization;condition;increment/decrement)
	{
	//code
	}
	
	2.While loop:
	=============
	if we do not know no. of iterations in advance
	
	while(condition){
	//code to iterated
	increment/decrement
	}
	
	3.Do-while loop:
	================
	
	if we do not know no. of iterations in advance, but if we want our code to get executed atleast once.
	
	do{
	//code
	}while(condition)
	
	
	3.Transfer/ jump stmts:
	======================
	
	1.break:
	
	loops,switch
	
	terminates the loop , and resumes at the nxt line after loop
	
	
	2.continue:
	
	skips the current execution inside loop and continues the loop immediately
	
	operators:
	==========
	
******************************************************************************
	OOPS:
	=====
	OOP is about creating the objects that contain both data members(variable) and the member functions(method).
	
	oop paradigm--4
	
	1.Inheritance
	2.Polymorphism
	3.Abstraction
	4.Encapsulation
	
	key aspects: class and object
	
	class:
	=======
	A class is a blueprint for objects.
	
	it is logical entity.
	
	collection of data members and member functions.
	
	objects are created for class properties.(variables,methods)
	
	object:
	=======
	object is an instance of class.//allocating memory for class properties
	
	objects are created for memory allocation to class properties.
	
	An object is an entity which has both state and the behavior.
	
	
	class student{  		//---100stdents
	
	name 
	rollno 
	age
	contact
	
	displayMarks(name, marks){
	
	}
	
	}
	
	
	stdnt1.... stella //obj1
				101
				15
				999999
	
	
	stdnt2.....sandy  //obj2
				102
				16
				89998
				
	
	1.INHERITANCE:
	===============	
	
	Acquiring the properties from one class to another class.
	
	properties can be variables,methods,constructors,interface,...
	
	CODE REUSABILITY**
	
	**extends, implements keywords are used in inheritance
	
	class A{
	
	//100 methods+//11methods logically from object class
	
	}
	
	public class B extends A{
	
	//50 methods
	+100 methods //logical from A
	+11 methods //logically from object class
	}
	
	***Object class is super class of all java classes by default(11 methods)
	
	different types:
	================
	1.single inheritance------one parent-one child
	2.multilevel inheritance---super parent--parent--child(chain of inheritance)
	3.hierarchial inheritance---parent--child1,child2
	*4.multiple inheritance---many parents--single child
	5.hybrid inheritance
	
	**multiple inheritance is not supported in java @classlevel.
	
	
	**Multiple inheritance in java is supported @Interface level
	
	abstract methods and concrete methods:
	=======================================
	concrte method:
	----------------
	return type method name(){//method signature
	//logic
	//method body
	}
	
	method with implementation 
	
	abstract method:
	===============
	method without implementation
	
	public void display();
	
	abstract keyword
	
	public abstract void display();
	
	why??
	
	whatsapp send button
	
	Abstraction:
	=============
	
	Hiding the unwanted things from the end user.
	
	Security
	
	
	abstract class and interface:
	==============================
	concrete class:collection of concrete methods
	
	abstract class:collection of both concrete methods and abstract methods.
	
	interface:collection of abstract methods.
	
	** interface keyword.
	
	public abstract void m1();
	
	**we cannot create objects for abstract class and interface.
	
	2ways:
	======
	1.Abstract classes(0-100%)
	2.Interface(100%)
	
	
	Multiple Inheritance:
	======================
	class A{							class B{
	
	void m1(int a,int b)				void m1(int a,int b)
	{									{
	syso(a+b)							syso(a*b)
	
	}									}
	}									}
	
	class C extends A,B{
	
	psvm(){
	C c=new C();
	c.m1(10,5);
	}
	
	}
	
	Polymorphism:
	==============
	
	poly--many
	morphs-- forms
	
	having many forms.
	
	single task in different ways--java
	
	eg: humans...as child,student,friends....
	
		print method
	
		print
	
	2types:
		
		1.Compile time polymorphism
		2.Run time polymorphism
		
		
		acheived in 2ways:
			
			1.Method Overloading
			2.Method Overriding
		
		
	Method Overloading:
	===================
	
	method name is same, but signature different
	
	signature...>>no.of params,order of params, types of params.
	
	print..overloaded to accept all types of data.
	
	adv: code readability
	
		printString
		printInt
		printFloat   //decreases code readability.
		
	+ addition, concatenation
	
	fname+lastname  stella+epuri    stella epuri
	
	calculator:add 2 3
				sum	2 3 4
				toatl 2 3 65 6
	
	type promotion in method overloading:
	======================================
	
	smaller type to larger type conversions.
	
	
	Method Overriding:
	==================
	Method name is same, but implementation will be different.
	
	parent class method will be overridden by child class.
	
	
	rules:
	
	1.method name and signature has to be same.
	2. parent child relation.
	
	parent - child 
	class Parent{
	
	int property(){//100 more methods
	
	return 100000000;
	
	}
	public void wedding(){
	sop("sam")
	
	}
	}
	class Child extends Parent{
	
	@Override
	public void wedding(){
	sop("xxxx")
	
	} 
	
	}
	psvm(){
	Child c=new Child();
	
	c.wedding();

	}
	
	
	assignment:
	---------
	Parent  marks ++marks 
	
	child --marks  --marks
	
	Constructor:
	============
	special member method.
	
	used to initialize the object.
	
	int a;//declaration
	
	int a=10;//initialization
	
	classname obj=new classname();
	
	classname obj=new constructor();
	
	
	**constructor gets called everytime.... whenever an object is created.
	
	rules:
	======
	
	1.classname and constructor name both need to be same.
	
	2.no return type.
	
	2 responsibilities:
	--------------------
	1.to initialize the object.
	
	2.to provide default values to the instance properties.
	
	
	2types:
	-------
	1.Default constructor : without parametres
	
	2.Parameterized constructor : with parameters
	
	class Test{
	
	Test(){
	
	}
	
	}
	
	class A{
	
	int b;
	
	psvm(){
	A obj=new A();
	sop(obj.b);//0
	}
	}
	Note:
	=====
	compiler automatically creates a default constructor if there is none.
	
	Parameterized constructor:
	==========================
	used to provide different values to different objects.
	
	class Test{
	
	Test(parameters){
	
	
	}
	
	}
	
	**one default constructor is allowed and any no. of parameterized constructors.
	
	>>Constructor overloading is possible.
	
	
	final,this,super keywords:
	===========================
	
	Final keyword:
	==============
	
	**to restrict the user.
	
	3places:
	========
	1.before variable
	2.before method
	3.before class
	
	1.before variable:
	==================
	once declared with final, values within the variable cannot be changed.
	
	2.before method:
	=================
	cannot change the method implementation(overriding is not possible)
	
	3.before class:
	===============
	we cannot extend the final class.(inheritance is not allowed)
	
	
	this & super keywords
	======================
	this keyword is used to refer to the current class properties
	
	super keyword is used to refer to the parent class properties
	
	properties can be variable,method,object, constructor
	
	note:
	=====
	Constructor call must be the first statement in a constructor
	
	
	Access Modifiers:
	=================
	4 modifiers:-
	
		1.public
		2.private
		3.protected
		4.default
		
		scope/ accessibility of class,variable,methods,constructors.
	
	
	1.private:only within the class,cannot access outside the class.

	2.protected:anywhere within the package whether it is child or not,but outside the package we can access 
	             only when   there is a parent child class relation(inheritance)

	3.default: if we are not using any modifier, it behaves as default.
				....>> only within the package,cannot access outside the package.

	4.public: can be accessed everywhere.
	
	used for:
	=========
	used for encapsulation.
	
	**misuse of data can be prevented.
	
	Encapsulation:
	==============
	Wrapping up of Data Members and the methods to get .(the data)
	
	It is  a unit which is a combination of both data members and corresponding methods.

	private: DATA members
	
	public methods: setters and getters
	
	**if all the data in the class is private....tightly encapsulated class.
	
	data hiding: making the data aas private to prevent unauthorised access to data.
	
	why encapsulation???
	---------------------
	1.testing,debugging will be made easy and increases readability.
	2.control over the data.
	3.outer classes cannt access the data.
	
	Data Hiding:
	============
	Data hiding is a way of restricting the access of our data members by hiding the implementation details.

	Encapsulation also provides a way for data hiding.

	Note:
	-------
	Encapsulation refers to the bundling of related fields and methods together.

...>> This can be used to achieve data hiding. Encapsulation in itself is not data hiding.

	
	String class,StringBuffer,StringBuilder:
	========================================
	string:sequence/ collection of characters.
	
	>>It is non-primitive datatype
	
	>>predefined class available in java.lang  package
	
	>>special class for representing set of characters.
	
	
	String name="stella";
	
	note:
	=====
	All the strings are object of a predefined class called String.
	
	3classes:.....Strings
	--------
	1.String
	2.StringBuffer
	3.StringBuilder
	
	**all these 3 classes are available in java.lang package.
	
	1.String class: immutable strings(not changeable)
	2.StringBuffer,StringBuilder: muttable strings(changeable)
	
	
	String:
	=======
	2ways to create string object.
	
	1.by using literal syntax:
			
			String name="java";
			
	2.by using new keyword
	
			String name=new String("java");
			
		
		Memory areas:
		=============

		instance:Heap area
		static:Method area
		local:Stack area.
		
	StringConstantPool:(SCP)
	=======================	
		String is a special class, it will get memory space in string constant pool.

		**SCP will not allow duplicates.
		
		1.using string literal:
		=======================

		String name="welcome";
		String name1="welcome";
		String name2="welcome";

		not creating different memory allocations.
		
		2.using new keyword:
		====================
		
		String s=new String("welcome");
		String s2=new String("welcome");
		
		new keyword-->> new memory creation inside heap area.
		
		comparing:
		-----------
		"==" operator 
		equals()
		compareTo()
		
		"==" operator checks for the memory references
		equals() checks for the values.
		
		compareTo() returns int value.
		>>comparing the strings lexicographically.
		
				returns 0,if both objects are same.
				returns negative, if obj1 comes before obj2.
				returns positive, if obj1 comes after obj2.
		
		String class methods:
		
		https://www.w3schools.com/java/java_ref_string.asp
		
		why string is immutable??
		==========================
		scp doesnot allow duplicates.
		
		string has to be immutable, bcz we dongt want other memory references to get changed.
		
		StringBuffer and StringBuilder:
		=================================
		
		StringBuffer sb=new StringBuffer("java");
		
		
		string ...equals()....values
		sb........equals()....memory references
		
		
		
		difference :
		
		stringBuffer...synchronized methods
		StringBuilder....no synchronized methods
		
		synchronized:
		==============
		t1,t2,t3 
		
		synchronized:t2,t3 has to wait until the completion of t1 execution....thread safety
		
		non-synchronized:t1,t2,t3 can execute simultaneously.
		
		
		Arrays:
		=======
		
		It is an indexed collection of fixed no. of homogeneous data elements.
		
		**an array in java is an object.
		
		String name="stella";
		
		String[] name={"stella","sandy"};//literal way
		
		int[] num={1,2,3,6};
		
		String[] name=new String[5];//new keyword
		
		advantages:
		===========
		
		>>group of elements/data together.
		
		>>code readability
		
		disadvantages:
		===============
		1.stores only similar data.
		
		2.an array is fixed in size.
		
		note:
		=====
		array will get stored in heap area.
		
		arrays can be accessed with the help of index values.
		
		2 types of arrays:
		===================
		1.single dimensional array
		2.multi dimensional array
		
		1 2 3
		4 5 6
		
		Exception Handling:
		===================
		A mechanism of converting system defined error messages into user friendly error messages.
		
		limitations:
		
		1.system defined error message.
		2.abnormal termination 
		
		exception handling: 5 keywords
		-------------------
		try  :risky code
		catch :handling code
		finally: clean-up code(closing connections,..)
		throw: to throw the exception explicitly.
		throws: to declare the exceptions.
		
		errors:
		======
		compile time error....>>poor understanding of the language
		runtime error(Exception).....>> invalid input
		
		Exception:
		===========
		exception is an unexpected event that disrupts the normal flow of the program.
		
		object thrown at the runtime.
		
		>>Throwable class is the root class of all the exception classes.,,Exception class inherits Throwable.
		
		types of exceptions:
		--------------------
		1.checked exceptions
		2.unchecked exceptions
		3.errors
		
		
		system defined
		user defined
		
		user defined exception:
		=======================
		1.take class....child to Exception class.
				extends Throwable,Exception.
		
		2.take one parameterized constructor and a toString method.
		
		
		File Handling:
		===============
		File ...predefined class...java.io package.
		
		create,write,read 
		
		predefined classes to write into file:
		---------------------------------------
		
		FileWriter
		BufferedWriter
		PrintWriter
		
		predefined classes to read from file:
		-------------------------------------
		
		FileReader
		BufferedReader
		
		File class:
		===========
		File f=new File("hello.txt");
		
		FileWriter:
		===========
		write()...to write data
			limitations:
			-------------
				1.no number data is allowed.
				2."\n" is not supported in every o.s
				
				
		BufferedWriter:
		================
			limitations:
			------------
			1.no number data is allowed.
			2.newLine() all the time.
			
			
		PrintWriter:
		=============
			
		FileReader:
		===========
		limitations:(time taking)
		------------
		read() will read the data character by character
			
		BufferedReader:
		=================
		 readLine(): reads line by line
		

	Serialization and DE-serialization:
	===================================
	
	Serialization: converting object data into byte data.
	
		to serialize: 2 classes
		
			1.FileOutputStream
			2.ObjectOutputStream......writeObject()
	
	DE-serialization: converting byte data into object data.
	
		to de-serialize: 2 classes
		
			1.FileInputStream
			2.ObjectInputStream......readObject()
	
	
		**serializable is a marker interface(having zero abstract methods).
					

	Multi Threading:
	================
	Executing multiple tasks at a time.
	
	1.process based
	2.Thread based
	
	class Test{
	
	opening and reading from a file...5hrs// thread1
	
	
	1000 lines of code // thread2
	
	}

	why??....to improve response time for better performance.
	
	in java?
			 2ways:
					1.by implementing Runnable Interface.
					2.by extending Thread class.
					
					
	Runnable Interface:
	====================
	Runnable is a Functional interface.(SAM)
	
	javap java.lang.Runnable
	
	public interface java.lang.Runnable {
	public abstract void run();
	}
	........>>single abstract method(SAM).
	
	
			1.	class Test implements Runnable{
				 run(){
				 //code for which thread need to be created.
				 }
				
				}
	Thread class:
	==============
	child class of Runnable interface.
	>>start()
	
	1.Using Runnable:
 =================
 **Thread will be created only when we call start() method.
 
 >>start() method is present in Thread class.
 
 >>To call start(), we are creating Thread class object.
 
 >>start() method internally calls the run() method which will create threads.
 
 
 ***By default, we have "main" thread(main method logic)
 
 >>The threads we create become the child threads to the main thread.
 
 >>Garbage collector is also one of the threads which execute during execution .
 
 **we cannot predict output when multithreading.
 
....>> Threads will be executed by thread scheduler in Operating system.
 
 
 Thread Priorities:
 ==================
 for every thread their will be priority.
 
 priority range:1-10
 
 1-min priority
 10-max priority
 5-norm priority(default)

priority of main thread is 5.

**currentThread() is a method in Thread class whch returns the currently executing thread object.

.....>> it is a static method in thread class.
...>>returns object 
 
Thread lifecycle:
=================
 Thread have following states:
New
Runnable
Running
Waiting/blocked/sleeping
Terminated (Dead) 
 
 sleep():we have to specify the no. of nano seconds(1000nano secs=1sec)
========
 if we call sleep(), the current executing thread will go to waiting state.
 
 yield():
 ========
 t1:5
 
 t2:6
 
 t3:7
 
 if we call yield(),it will pause current executing thread and check for priorities of other threads.
 
 >>if other thread priority is greater than current thread priority,then it will stop current thread execution and gives chance to highest priority thread.
 
 >>if other thread priorities are low, then current thread will continue execution.
 
 >>if all priorities are same, then execution depends on thread scheduler.
 
 join():
 =======
 if a thread wants to wait until the completion of some other thread, then we should go for join().
 
 synchronization:
 =================
 
 we achieve synchronization with synchronized keyword.
 
 with synchronization we can have controlled threads.
 
 >>execution of all threads simultaneously is not possible.
 
 t1,t2,t3 are threads ....
 
 if t1 has started execution, t2 and t3 has to wait until completion of t1.
 if t2 has started execution, t1 and t3 has to wait until completion of t2....
 
 we can avoid inconsistent data with synchronization.
 
 advantages:
 
 consistent data
 
 disadvantage:
 
 performance may reduce.
 
 InterThread communication:
 ==========================
 
 InterThread communication is about allowing the synchronized threads to communicate with each other.
 
 we acheive inter thread communication with 3 methods.
 
 wait()
 notify()
 notifyAll()
 
 NOTE:All three methods belong to the Object class(Not Thread class)
 
 wait():
 
 Is used to move running thread to waiting area.
 
 notify():
 
 is used to inform waiting thread to come back to running area.
 
 
	
	1 - 10
	2,4,6,8,10
	1,3,5,7,9
	
	
	***Collection:
	================
	
	If group of objects put(store) together into a single entity....collection.
	
	Collection Framework:
	=====================
	readymade template
	
	Limitations of Arrays:
	-----------------------
	1.Homogeneous objects can be stored.(similar data)
	2.Arrays are fixed in size.
	3.no utility methods in arrays.
	
	Advantages of Collection:
	=========================
	1.both homogeneous and heterogeneous objects can be stored.(similar and dissimilar)
	2.collections are not fixed in size.
	3.many utility methods in collections.
	
	variable
	arrays
	collection
	
	>>present in java.util package.
	
	*****
	default size of arraylist is :10
			(cc*3/2)+1
	default size of linkedlist is :10(adding nodes)
	default size of vector is :10(doubly linked list algorithm)20
	
	Comparable and Comparator:
	===========================
	
	comparable....compareTo().....Natural Sorting order..java.lang package
	
	Comparator....compare()......Custom sorting order....java.util package
	
	
	***CASE STUDY ------corejava....Banking Operations
	
	Layered Architecture
	
	
	Java 8:
	=======
	march 18th,2014.
	
	10 lines in python.... Functional Programming
	
	100 lines in java
	
	1.Lambda Expression
	2.Functional Interface
	3.default,static methods in interfaces
	4.Predefined Functional Interfaces
			predicate
			function
			consumer
			supplier
	5.Date and Time Api	
	
	Objectives of java8:
		1.simplified code(concise)
		2.to introduce functional programming
		3.To enable parallel programming
		
	1.Lambda Expression:
	=====================
	Anonymous Function
			Nameless
			No return type
			No access modifiers
			
		eg:
		 
		 public void m1(){
		 
		 syso("HelloWorld");
		 
		 }
	
	L.E: ()-> syso("HelloWorld");
		 
	eg: public void addition(int a,int b){
	
		syso(a+b);
		
	    }
	
	L.E:(a, b) -> syso(a+b);
		
	2.Functional Interface:
	========================
	interface having SAM.
	    
		Annotation: @FunctionalInterface....it is optional
		
		
	3.default,static methods in interfaces:
	=======================================
	from java 1.8; default and static methods will be used in INTERFACES.
	
	Default Method in interface:
	----------------------------
	interface I{
	 void m1();
	 
	 default void m2(){
	   syso("hello");
	 }
	}
	class One implements I{
	 void m1(){
	 
	 }
	 @Override
	 public void m2(){
	 syso("hiii");
	 }
	}
	class Two implements I{
	 void m1(){
	 
	 }
	}
	class Three implements I{
	 void m1(){
	 
	 }
	}
	
	Static Methods in interface:
	=============================
	
	class    vs   interface
	
	costly         cheap
	heavier			lighter
	
	
	static methods in classes
	
	static methods @Interfaces.....from java 1.8
	
	
	5.Date and Time Api	
	===================
	
	LocalDate yyyy-mm-dd
	LocalTime hour-min-sec
	LocalDateTime
	
	
	DATABASE:
	==========
	Data: collection of raw information of any source.
	
	DataBase:Used to store and organise our data for future purpose and security.
	
	DBMS:DataBase Management System
			 
			s/w tool which is used to manage and access the database.
	
	RDBMS:to manage relational database.(mysql)
	
				relation-->>Table
	
				table:- association of rows and columns.
					
					rows-->> records
					columns-->>fields
	
	
	SQL: Structured Query Language
	
	Queries
	
	5types of Queries:
	===================
		1.DDL:Data Definition Language ---->>>create,alter,truncate,drop,rename
		2.DML:Data Manipulation Language--->>>insert,update,delete,merge
		3.DQL:Data Query Language/DRL:Retrieval-->>select
		4.DCL:Data Control Language-->>grant,revoke
		5.TCL:Transaction Control Language-->>commit,savepoint,rollback
	
	
	CRUD: Create Read Update Delete 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	











		
			
		
		
		
		
				
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		











		
			
			
			
			
			
			
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	